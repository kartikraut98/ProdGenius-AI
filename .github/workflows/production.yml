name: 'Prod Workflow'

on:
  push: 
    branches: 
      - production

env:
  TIMEOUT: 240s
  PORT: 80
  CPU: 4
  MEMORY: 16Gi
  MAX_INSTANCES: 10
  MIN_INSTANCES: 1

jobs:
  development:
    name: 'Continuous Development'
    runs-on: 'ubuntu-latest'
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - name: Fetch all branches
        run: git fetch --all
      
      - name: Check if Prouction is up-to-date with Staging
        id: check_merge
        run: |
          # Check for any unmerged commits from staging
          git fetch origin staging
          STAGING_LATEST_COMMIT=$(git rev-parse origin/staging)
          PROD_MERGED_COMMIT=$(git merge-base HEAD origin/staging)
          
          if [ "$STAGING_LATEST_COMMIT" != "$PROD_MERGED_COMMIT" ]; then
            echo "Production branch is not up-to-date with Staging. Aborting deployment."
            exit 1
          else
            echo "Production branch is up-to-date with Staging. Proceeding with CI/CD."
          fi

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Docker Auth'
        run: |-
          gcloud auth configure-docker "us-east1-docker.pkg.dev"

      - name: 'Deploy to Cloud Run'
        run: |-
          gcloud run deploy ${{secrets.SERVICE}} \
            --allow-unauthenticated \
            --image="${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.GAR_NAME }}/${{ secrets.SERVICE }}:${{ github.sha }}" \
            --project=${{secrets.PROJECT_ID}} \
            --region=${{secrets.REGION}} \
            --memory=${{env.MEMORY}} \
            --cpu=${{env.CPU}} \
            --port=${{env.PORT}} \
            --timeout=${{env.TIMEOUT}} \
            --max-instances=${{env.MAX_INSTANCES}} \
            --min-instances=${{env.MIN_INSTANCES}} \
            --set-env-vars=OPENAI_API_KEY=${{ vars.OPENAI_API_KEY }},HF_TOKEN=${{ vars.HF_TOKEN }},GROQ_API_KEY=${{ vars.GROQ_API_KEY }},LANGFUSE_SECRET_KEY=${{ vars.LANGFUSE_SECRET_KEY }},LANGFUSE_PUBLIC_KEY=${{ vars.LANGFUSE_PUBLIC_KEY }},LANGFUSE_HOST=${{ vars.LANGFUSE_HOST }},DB_USER=${{ vars.DB_USER }},DB_PASS=${{ vars.DB_PASS }},DB_NAME=${{ vars.DB_NAME }},INSTANCE_CONNECTION_NAME=${{ vars.INSTANCE_CONNECTION_NAME }},MLFLOW_TRACKING_URI=${{ vars.MLFLOW_TRACKING_URI }},MLFLOW_TRACKING_USERNAME=${{ vars.MLFLOW_TRACKING_USERNAME }},MLFLOW_TRACKING_PASSWORD=${{ vars.MLFLOW_TRACKING_PASSWORD }},VERTA_API_ACCESS_TOKEN=${{ vars.VERTA_API_ACCESS_TOKEN }}

      - name: 'Show output'
        run: echo ${{ steps.development.outputs.url }}
