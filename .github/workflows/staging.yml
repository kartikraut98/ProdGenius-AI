name: 'Staging Workflow'

on:
  push:
    branches: 
    - staging

jobs:
  integration:
    name: Continuous Integration
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout Code
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - name: Fetch all branches
        run: git fetch --all
      
      - name: Check if Staging is up-to-date with Dev
        id: check_merge
        run: |
          # Check for any unmerged commits from dev
          git fetch origin dev
          DEV_LATEST_COMMIT=$(git rev-parse origin/dev)
          STAGING_MERGED_COMMIT=$(git merge-base HEAD origin/dev)
          
          if [ "$DEV_LATEST_COMMIT" != "$STAGING_MERGED_COMMIT" ]; then
            echo "Staging branch is not up-to-date with Dev. Aborting deployment."
            exit 1
          else
            echo "Staging branch is up-to-date with dev. Proceeding with CI/CD."
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
  
      - name: Install Dependencies
        run: |-
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --only main --no-root --verbose
      
      - name: Write Google Credentials
        run: echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > /tmp/google-credentials.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
      
      - name: Run Verta Model Pipeline
        env: 
          HF_TOKEN: ${{ vars.HF_TOKEN }}
          OPENAI_API_KEY: ${{ vars.OPENAI_API_KEY }}
          GROQ_API_KEY: ${{ vars.GROQ_API_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ vars.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_SECRET_KEY: ${{ vars.LANGFUSE_SECRET_KEY }}
          LANGFUSE_HOST: ${{ vars.LANGFUSE_HOST }}
          TOKENIZERS_PARALLELISM: "false"
          INSTANCE_CONNECTION_NAME: ${{ vars.INSTANCE_CONNECTION_NAME }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASS: ${{ vars.DB_PASS }}
          DB_NAME: ${{ vars.DB_NAME }}
          GOOGLE_APPLICATION_CREDENTIALS: '/tmp/google-credentials.json'
          MLFLOW_TRACKING_URI: ${{ vars.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ vars.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ vars.MLFLOW_TRACKING_PASSWORD }}
          VERTA_API_ACCESS_TOKEN: ${{ vars.VERTA_API_ACCESS_TOKEN }}
          MS_TEAMS_WEBHOOK_URL: ${{ vars.MS_TEAMS_WEBHOOK_URL }}
          HOST: "0.0.0.0"
          PORT: 80
        run: |-
          echo "Running Model Pipeline"
          poetry run python src/main.py

      - name: Run unit tests
        env: 
          HF_TOKEN: ${{ vars.HF_TOKEN }}
          OPENAI_API_KEY: ${{ vars.OPENAI_API_KEY }}
          GROQ_API_KEY: ${{ vars.GROQ_API_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ vars.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_SECRET_KEY: ${{ vars.LANGFUSE_SECRET_KEY }}
          LANGFUSE_HOST: ${{ vars.LANGFUSE_HOST }}
          TOKENIZERS_PARALLELISM: "false"
          INSTANCE_CONNECTION_NAME: ${{ vars.INSTANCE_CONNECTION_NAME }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASS: ${{ vars.DB_PASS }}
          DB_NAME: ${{ vars.DB_NAME }}
          GOOGLE_APPLICATION_CREDENTIALS: '/tmp/google-credentials.json'
          MLFLOW_TRACKING_URI: ${{ vars.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ vars.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ vars.MLFLOW_TRACKING_PASSWORD }}
          VERTA_API_ACCESS_TOKEN: ${{ vars.VERTA_API_ACCESS_TOKEN }}
          MS_TEAMS_WEBHOOK_URL: ${{ vars.MS_TEAMS_WEBHOOK_URL }}
          HOST: "0.0.0.0"
          PORT: 80
        run: |-
          echo "Running unit tests for verta"
          pytest tests/test.py --junitxml=test-results.xml

      - name: Clean up Google Credentials
        run: rm /tmp/google-credentials.json

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.xml
          

  delivery:
    name: Continuous Delivery
    if: github.ref == 'refs/heads/staging'
    needs: integration
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Docker Auth'
        run: |-
          gcloud auth configure-docker "${{ secrets.REGION }}-docker.pkg.dev"
  
      - name: 'Build and Push Container'
        run: |-
          docker build -t "${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.GAR_NAME }}/${{ secrets.SERVICE }}:${{ github.sha }}" -f Dockerfile .
          docker push "${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.GAR_NAME }}/${{ secrets.SERVICE }}:${{ github.sha }}"

      - name: 'Show output'
        run: echo ${{ steps.delivery.outputs.url }}
